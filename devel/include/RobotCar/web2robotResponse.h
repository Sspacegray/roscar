// Generated by gencpp from file RobotCar/web2robotResponse.msg
// DO NOT EDIT!


#ifndef ROBOTCAR_MESSAGE_WEB2ROBOTRESPONSE_H
#define ROBOTCAR_MESSAGE_WEB2ROBOTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RobotCar
{
template <class ContainerAllocator>
struct web2robotResponse_
{
  typedef web2robotResponse_<ContainerAllocator> Type;

  web2robotResponse_()
    : goal_point(0)  {
    }
  web2robotResponse_(const ContainerAllocator& _alloc)
    : goal_point(0)  {
  (void)_alloc;
    }



   typedef int32_t _goal_point_type;
  _goal_point_type goal_point;





  typedef boost::shared_ptr< ::RobotCar::web2robotResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RobotCar::web2robotResponse_<ContainerAllocator> const> ConstPtr;

}; // struct web2robotResponse_

typedef ::RobotCar::web2robotResponse_<std::allocator<void> > web2robotResponse;

typedef boost::shared_ptr< ::RobotCar::web2robotResponse > web2robotResponsePtr;
typedef boost::shared_ptr< ::RobotCar::web2robotResponse const> web2robotResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RobotCar::web2robotResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RobotCar::web2robotResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RobotCar::web2robotResponse_<ContainerAllocator1> & lhs, const ::RobotCar::web2robotResponse_<ContainerAllocator2> & rhs)
{
  return lhs.goal_point == rhs.goal_point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RobotCar::web2robotResponse_<ContainerAllocator1> & lhs, const ::RobotCar::web2robotResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RobotCar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RobotCar::web2robotResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RobotCar::web2robotResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RobotCar::web2robotResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RobotCar::web2robotResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RobotCar::web2robotResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RobotCar::web2robotResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RobotCar::web2robotResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "836a7491234659f67cc4e1bb62045b48";
  }

  static const char* value(const ::RobotCar::web2robotResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x836a7491234659f6ULL;
  static const uint64_t static_value2 = 0x7cc4e1bb62045b48ULL;
};

template<class ContainerAllocator>
struct DataType< ::RobotCar::web2robotResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RobotCar/web2robotResponse";
  }

  static const char* value(const ::RobotCar::web2robotResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RobotCar::web2robotResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 goal_point\n"
;
  }

  static const char* value(const ::RobotCar::web2robotResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RobotCar::web2robotResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct web2robotResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RobotCar::web2robotResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RobotCar::web2robotResponse_<ContainerAllocator>& v)
  {
    s << indent << "goal_point: ";
    Printer<int32_t>::stream(s, indent + "  ", v.goal_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTCAR_MESSAGE_WEB2ROBOTRESPONSE_H
