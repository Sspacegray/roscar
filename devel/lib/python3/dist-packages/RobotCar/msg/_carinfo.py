# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from RobotCar/carinfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class carinfo(genpy.Message):
  _md5sum = "0928fc105e49385f0a0196c2865ce602"
  _type = "RobotCar/carinfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 speed_x
int32 speed_z
int32 power
int32 limit_down
int32 limit_up
int32 goal_point
int32 robot_start"""
  __slots__ = ['speed_x','speed_z','power','limit_down','limit_up','goal_point','robot_start']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       speed_x,speed_z,power,limit_down,limit_up,goal_point,robot_start

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(carinfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.speed_x is None:
        self.speed_x = 0
      if self.speed_z is None:
        self.speed_z = 0
      if self.power is None:
        self.power = 0
      if self.limit_down is None:
        self.limit_down = 0
      if self.limit_up is None:
        self.limit_up = 0
      if self.goal_point is None:
        self.goal_point = 0
      if self.robot_start is None:
        self.robot_start = 0
    else:
      self.speed_x = 0
      self.speed_z = 0
      self.power = 0
      self.limit_down = 0
      self.limit_up = 0
      self.goal_point = 0
      self.robot_start = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7i().pack(_x.speed_x, _x.speed_z, _x.power, _x.limit_down, _x.limit_up, _x.goal_point, _x.robot_start))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.speed_x, _x.speed_z, _x.power, _x.limit_down, _x.limit_up, _x.goal_point, _x.robot_start,) = _get_struct_7i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7i().pack(_x.speed_x, _x.speed_z, _x.power, _x.limit_down, _x.limit_up, _x.goal_point, _x.robot_start))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.speed_x, _x.speed_z, _x.power, _x.limit_down, _x.limit_up, _x.goal_point, _x.robot_start,) = _get_struct_7i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7i = None
def _get_struct_7i():
    global _struct_7i
    if _struct_7i is None:
        _struct_7i = struct.Struct("<7i")
    return _struct_7i
